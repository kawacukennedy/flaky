name: FlakeHunter CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          python -m venv backend/venv
          source backend/venv/bin/activate
          pip install -r backend/requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run backend unit tests
        run: |
          source backend/venv/bin/activate
          pytest backend/tests/

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm test

      - name: Run frontend e2e tests
        run: |
          cd frontend
          npx playwright install --with-deps
          npm run test:e2e

      - name: Build frontend production bundle
        run: |
          cd frontend
          npm run build

      - name: Deploy to Staging (Placeholder)
        if: github.ref == 'refs/heads/main'
        run: echo "Deploying to staging environment..."

      - name: Notify developers (Placeholder)
        if: always()
        run: echo "CI/CD pipeline completed. Check logs for details."

  run-flakehunter-plugins:
    name: Run FlakeHunter Plugins
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install requests
      - name: Run tests with FlakeHunter Pytest Plugin
        run: backend/venv/bin/pytest --flakehunter --repeat=20 tests/
      - name: Upload results
        run: |
          # In a real scenario, you would have a dedicated script to upload reports
          # This is a simplified example that just lists the files
          ls -R flakehunter_reports
      - name: Post PR Comment
        if: failure() && github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PR_NUMBER: ${{ github.event.number }}
        run: python scripts/post_pr_comment.py