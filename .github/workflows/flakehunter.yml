name: FlakeHunter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Verify branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.event_name }}" != "pull_request" ]]; then
            echo "Workflow only runs on main branch or PRs"
            exit 1
          fi

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run backend unit tests with coverage
        run: |
          cd backend
          source venv/bin/activate
          pip install pytest-cov
          pytest --cov=. --cov-report=xml --cov-fail-under=90

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test:unit

      - name: Run frontend e2e tests
        run: |
          cd frontend
          npx playwright install --with-deps
          npm run test:e2e

      - name: Build frontend production bundle
        run: |
          cd frontend
          npm run build

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy backend to staging
        run: |
          # Placeholder for backend deployment
          echo "Deploying backend to staging..."

      - name: Deploy frontend to staging
        run: |
          # Placeholder for frontend deployment
          echo "Deploying frontend to staging..."

      - name: Verify health checks
        run: |
          # Placeholder for health checks
          echo "Running health checks..."
          # curl -f http://staging-api/health || exit 1
          # curl -f http://staging-frontend/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          # Placeholder for production deployment
          echo "Deploying to production..."

      - name: Verify production health
        run: |
          # Placeholder for production health checks
          echo "Verifying production deployment..."
          # Add rollback logic on failure

  notify:
    name: Notify and Monitor
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify via Slack
        run: |
          # Placeholder for Slack notification
          echo "Sending Slack notification..."

      - name: Monitor runtime errors
        run: |
          # Placeholder for error monitoring
          echo "Monitoring runtime errors..."